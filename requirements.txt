# SerpAPI Project Requirements

## Project Overview
This is a SerpAPI integration system that collects and stores online data through API queries with complete data persistence.

## System Architecture

### Directory Structure
```
SerpAPI/
├── Main/           # Main application files and scripts
├── DB/             # Database files and related scripts
├── tests/          # Test suite (also hosts temp_ experimental scripts; no standalone Temp directory)
└── agent-instructions.md
```

## Core Requirements

### 1. API Integration
- **Primary Function**: Use SerpAPI to retrieve data online
- **Data Persistence**: ALL raw data from EVERY API query execution must be saved to local database
- **No Data Loss**: Ensure complete capture of all API responses
- **Security**: Manage API keys securely using environment variables
- **Rate Limiting**: Implement appropriate rate limiting and retry logic

### 2. Database Management
- **Storage Location**: All database files in `/DB` directory
- **Schema Design**: Agent-designed schema requiring user confirmation before implementation
- **Data Integrity**: Maintain consistency and reliability of stored data
- **Raw Data Preservation**: Store complete, unmodified API responses
- **Efficient Retrieval**: Implement optimized data access methods

### 3. File Organization
- **Main Files**: `/Main` directory for primary application code and scripts
- **Database Files**: `/DB` directory for database files and related scripts
- **Tests & Temp Scripts**: `/tests` directory for unit tests AND any temporary/experimental scripts (prefix with `temp_` and remove or formalize before release)
- **Strict Separation**: Maintain clear boundaries between file types

### 4. Data Authenticity
- **Real Data Only**: Mock data is PROHIBITED at all times
- **Live API Calls**: Always use actual SerpAPI responses
- **Data Verification**: Ensure all stored data comes from legitimate API calls

## Development Standards

### Code Quality
- Clean, maintainable code structure
- Descriptive naming conventions
- Comprehensive error handling
- Proper logging implementation
- Unit tests for critical functions

### Security Requirements
- Secure API key management
- Input validation for all user data
- Proper authentication mechanisms
- No hardcoded sensitive information
- Approved Dependencies Only: Add new third-party packages only after owner double-confirmation; prefer standard library; pin versions; remove unused packages promptly

### Documentation
- Clear code comments
- Updated README files
- Database schema documentation
- API data flow documentation

## Workflow Requirements

### Implementation Process
1. Analyze requirements thoroughly
2. **Design database schema and obtain user confirmation**
3. Plan implementation approach
4. Write code with proper structure
5. **Ensure all API data is saved to local database**
6. Test functionality comprehensively
7. Document all changes
8. Review and refactor as needed

### Critical Checkpoints
- **All implementation requires confirmation**
- Database schema must be approved before coding
- No deployment without complete data persistence verification
- All temporary files must be properly organized

## Technical Specifications

### Database Requirements
- Local database file storage
- Complete raw data preservation
- Efficient query capabilities
- Data integrity maintenance
- Backup and recovery procedures

### API Requirements
- SerpAPI integration
- Complete response capture
- Error handling and retry logic
- Rate limiting compliance
- Secure authentication

### Performance Requirements
- Efficient data storage
- Fast retrieval mechanisms
- Minimal memory footprint for temporary operations
- Scalable architecture design

## Quality Assurance

### Testing Requirements
- Unit tests for all critical functions
- Integration tests for API interactions
- Database operation testing
- Error handling verification
- Performance testing

### Validation Criteria
- All API responses successfully stored
- Database schema integrity verified
- File organization compliance confirmed
- Security measures validated
- Documentation completeness checked

## Compliance Notes
- No mock data usage permitted
- All temporary files in designated directory
- Database files properly organized
- Main application files in correct location
- Complete API response preservation mandatory

---
**Document Version**: 1.0  
**Last Updated**: September 8, 2025  
**Status**: Active Requirements Document
